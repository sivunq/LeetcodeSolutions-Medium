//BruteForce
class Solution {
public:
    int maxArea(vector<int>& height) {
        int len = height.size();
        int res,maxRes,val;
        
        maxRes=0;
        for (int i=0; i<len-1; i++){
            for (int j=i+1; j<len; j++){
                if(height[i]>height[j])val=height[j];
                else if(height[i]<height[j])val=height[i];
                else val=height[i];
                
                res=val*(j-i);
                
                if(res>=maxRes)maxRes=res;
            }
        }
        return maxRes;
    }
};



//optimal:
public class Solution {
    public int maxArea(int[] height) {
        int maxarea = 0, l = 0, r = height.length - 1;
        while (l < r) {
            maxarea = Math.max(maxarea, Math.min(height[l], height[r]) * (r - l));
            if (height[l] < height[r])
                l++;
            else
                r--;
        }
        return maxarea;
    }
}


//
We starts with the widest container, l = 0 and r = n - 1. Let's say the left one is shorter: h[l] < h[r]. Then, this is already the largest container the left one can possibly form. There's no need to consider it again. Therefore, we just throw it away and start again with l = 1 and r = n -1.


//
The widest container (using first and last line) is a good candidate, because of its width. Its water level is the height of the smaller one of first and last line.
All other containers are less wide and thus would need a higher water level in order to hold more water.
The smaller one of first and last line doesn't support a higher water level and can thus be safely removed from further consideration.