class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> cache;
        
        for (int i = 0; i < nums.size(); ++i){         
			remainder=60-(nums[i]%60);
            if (cache.find(remainder) != cache.end()){
                answer++;
            }
            else{
                cache.insert(make_pair(nums[i], i));
            }
        }
        return answer;
    }
};



int numPairsDivisibleBy60(vector<int>& time, int res = 0) {
  vector<int> m(60);
  for (auto t : time) {
    res += m[(60 - t % 60) % 60];
    ++m[t % 60];
  }
  return res;
}


class Solution {
public:
    int numPairsDivisibleBy60(vector<int>& time) {
        int m[60] = {};
        int ret = 0;
        for(auto x:time){
            int t = x % 60;
            int y = (60 - t)%60;
            ret += m[y];
            m[t]++;
        }
        return ret;
        
    }
};

